From 0bac9a6998963d3874d4f8102d6833ed8de2325e Mon Sep 17 00:00:00 2001
From: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date: Tue, 5 Sep 2023 10:13:01 +0600
Subject: [PATCH 52/85] pinctrl: renesas: Add ops for SoC-specific pin
 configuration

Add support for optional er-SoC operations to validate, get and set
custom pin configuration items.

Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
---
 drivers/pinctrl/renesas/pinctrl.c | 36 ++++++++++++++++++++++++++-----
 drivers/pinctrl/renesas/sh_pfc.h  | 10 +++++++++
 2 files changed, 41 insertions(+), 5 deletions(-)

diff --git a/drivers/pinctrl/renesas/pinctrl.c b/drivers/pinctrl/renesas/pinctrl.c
index 8c19d2cb3aba..d99c81569eee 100644
--- a/drivers/pinctrl/renesas/pinctrl.c
+++ b/drivers/pinctrl/renesas/pinctrl.c
@@ -144,7 +144,8 @@ static int sh_pfc_dt_subnode_to_map(struct pinctrl_dev *pctldev,
 		return ret;
 	}
 
-	ret = pinconf_generic_parse_dt_config(np, NULL, &configs, &num_configs);
+	ret = pinconf_generic_parse_dt_config(np, pctldev,
+					      &configs, &num_configs);
 	if (ret < 0)
 		return ret;
 
@@ -586,6 +587,9 @@ static bool sh_pfc_pinconf_validate(struct sh_pfc *pfc, unsigned int _pin,
 		return pin->configs & SH_PFC_PIN_CFG_IO_VOLTAGE;
 
 	default:
+		if (pfc->info->ops && pfc->info->ops->pinconf_validate)
+			return pfc->info->ops->pinconf_validate(pfc, _pin,
+								param);
 		return false;
 	}
 }
@@ -658,8 +662,17 @@ static int sh_pfc_pinconf_get(struct pinctrl_dev *pctldev, unsigned _pin,
 		break;
 	}
 
-	default:
-		return -ENOTSUPP;
+	default: {
+		int ret = -ENOTSUPP;
+
+		if (pfc->info->ops && pfc->info->ops->pinconf_get) {
+			spin_lock_irqsave(&pfc->lock, flags);
+			ret = pfc->info->ops->pinconf_get(pfc, _pin, config);
+			spin_unlock_irqrestore(&pfc->lock, flags);
+		}
+
+		return ret;
+	}
 	}
 
 	*config = pinconf_to_config_packed(param, arg);
@@ -739,8 +752,18 @@ static int sh_pfc_pinconf_set(struct pinctrl_dev *pctldev, unsigned _pin,
 			break;
 		}
 
-		default:
-			return -ENOTSUPP;
+		default: {
+			int ret = -ENOTSUPP;
+
+			if (pfc->info->ops && pfc->info->ops->pinconf_set) {
+				spin_lock_irqsave(&pfc->lock, flags);
+				ret = pfc->info->ops->pinconf_set(pfc, _pin,
+								  configs[i]);
+				spin_unlock_irqrestore(&pfc->lock, flags);
+			}
+
+			return ret;
+		}
 		}
 	} /* for each config */
 
@@ -828,6 +851,9 @@ int sh_pfc_register_pinctrl(struct sh_pfc *pfc)
 	pmx->pctl_desc.confops = &sh_pfc_pinconf_ops;
 	pmx->pctl_desc.pins = pmx->pins;
 	pmx->pctl_desc.npins = pfc->info->nr_pins;
+	pmx->pctl_desc.num_custom_params = pfc->info->num_custom_params;
+	pmx->pctl_desc.custom_params = pfc->info->custom_params;
+	pmx->pctl_desc.custom_conf_items = pfc->info->custom_conf_items;
 
 	ret = devm_pinctrl_register_and_init(pfc->dev, &pmx->pctl_desc, pmx,
 					     &pmx->pctl);
diff --git a/drivers/pinctrl/renesas/sh_pfc.h b/drivers/pinctrl/renesas/sh_pfc.h
index f95ed4069f70..e73f5eec56b6 100644
--- a/drivers/pinctrl/renesas/sh_pfc.h
+++ b/drivers/pinctrl/renesas/sh_pfc.h
@@ -273,6 +273,12 @@ struct sh_pfc_soc_operations {
 	void (*set_bias)(struct sh_pfc *pfc, unsigned int pin,
 			 unsigned int bias);
 	int (*pin_to_pocctrl)(struct sh_pfc *pfc, unsigned int pin, u32 *pocctrl);
+	bool (*pinconf_validate)(struct sh_pfc *pfc, unsigned int pin,
+				 enum pin_config_param param);
+	int (*pinconf_get)(struct sh_pfc *pfc, unsigned int pin,
+			   unsigned long *config);
+	int (*pinconf_set)(struct sh_pfc *pfc, unsigned int pin,
+			   unsigned long config);
 };
 
 struct sh_pfc_soc_info {
@@ -310,6 +316,10 @@ struct sh_pfc_soc_info {
 	unsigned int pinmux_data_size;
 
 	u32 unlock_reg;		/* can be literal address or mask */
+
+	unsigned int num_custom_params;
+	const struct pinconf_generic_params *custom_params;
+	const struct pin_config_item *custom_conf_items;
 };
 
 extern const struct sh_pfc_soc_info emev2_pinmux_info;
-- 
2.39.2

