From a4f448d3bba88d439319d4c3e2283bc89103a5d0 Mon Sep 17 00:00:00 2001
From: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date: Sat, 28 Oct 2023 16:11:45 +0600
Subject: [PATCH 77/85] net: phy: split phy_device_probe_ids() out of
 get_phy_device()

Inside phy_device_probe_ids(), unreset the phy for the probe.

After this commit, external code can initialize a phy_device object via
phy_device_initialize(), then attach reset suppliers, and then probe for
phy ids. This will ensure phy unreset for the duration of the probe.

Attaching reset suppliers out of mdiobus_register_device() will come
with the next commit.

Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
---
 drivers/net/phy/phy_device.c | 68 +++++++++++++++++++++++++++---------
 include/linux/phy.h          |  1 +
 2 files changed, 52 insertions(+), 17 deletions(-)

diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index f7d4ee14ad0d..a3136aa729bc 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -871,43 +871,77 @@ static int get_phy_c22_id(struct mii_bus *bus, int addr, u32 *phy_id)
 }
 
 /**
- * get_phy_device - reads the specified PHY device and returns its @phy_device
- *		    struct
- * @bus: the target MII bus
- * @addr: PHY address on the MII bus
+ * phy_device_probe_ids - probe at PHY's address for PHY ids
+ * @phydev: PHY device object initialized by phy_device_initialize()
  * @is_c45: If true the PHY uses the 802.3 clause 45 protocol
  *
- * Probe for a PHY at @addr on @bus.
+ * Probe for a PHY device at @phydev's bus address.
  *
- * When probing for a clause 22 PHY, then read the ID registers. If we find
- * a valid ID, allocate and return a &struct phy_device.
+ * When probing for a clause 22 PHY, then read the ID registers.
  *
  * When probing for a clause 45 PHY, read the "devices in package" registers.
  * If the "devices in package" appears valid, read the ID registers for each
- * MMD, allocate and return a &struct phy_device.
+ * MMD.
  *
- * Returns an allocated &struct phy_device on success, %-ENODEV if there is
- * no PHY present, or %-EIO on bus access error.
+ * On success, call phy_device_assign_ids() to complete PHY device object
+ * creation.
  */
-struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45)
+int phy_device_probe_ids(struct phy_device *phydev, bool is_c45)
 {
+	struct mii_bus *bus = phydev->mdio.bus;
+	int addr = phydev->mdio.addr;
 	struct phy_c45_device_ids c45_ids;
 	u32 phy_id = 0;
-	int r;
+	int ret;
 
 	c45_ids.devices_in_package = 0;
 	c45_ids.mmds_present = 0;
 	memset(c45_ids.device_ids, 0xff, sizeof(c45_ids.device_ids));
 
+	phy_device_reset(phydev, 0);
+
 	if (is_c45)
-		r = get_phy_c45_ids(bus, addr, &c45_ids);
+		ret = get_phy_c45_ids(bus, addr, &c45_ids);
 	else
-		r = get_phy_c22_id(bus, addr, &phy_id);
+		ret = get_phy_c22_id(bus, addr, &phy_id);
+
+	phy_device_reset(phydev, 1);
 
-	if (r)
-		return ERR_PTR(r);
+	if (ret)
+		return ret;
+
+	return phy_device_assign_ids(phydev, phy_id, is_c45, &c45_ids);
+}
+EXPORT_SYMBOL(phy_device_probe_ids);
 
-	return phy_device_create(bus, addr, phy_id, is_c45, &c45_ids);
+/**
+ * get_phy_device - reads the specified PHY device and returns its @phy_device
+ *		    struct
+ * @bus: the target MII bus
+ * @addr: PHY address on the MII bus
+ * @is_c45: If true the PHY uses the 802.3 clause 45 protocol
+ *
+ * Probe for a PHY at @addr on @bus. On success, return an allocated
+ * &struct phy_device. Otherwise, return the error code.
+ *
+ * Internally, use phy_device_probe_ids() to do the probe.
+ */
+struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45)
+{
+	struct phy_device *phydev;
+	int ret;
+
+	phydev = phy_device_initialize(bus, addr);
+	if (IS_ERR(phydev))
+		return phydev;
+
+	ret = phy_device_probe_ids(phydev, is_c45);
+	if (ret) {
+		phy_device_free(phydev);
+		return ERR_PTR(ret);
+	}
+
+	return phydev;
 }
 EXPORT_SYMBOL(get_phy_device);
 
diff --git a/include/linux/phy.h b/include/linux/phy.h
index c80aabace61f..b5ae1b13d4af 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -1349,6 +1349,7 @@ int phy_modify_paged(struct phy_device *phydev, int page, u32 regnum,
 struct phy_device *phy_device_initialize(struct mii_bus *bus, int addr);
 int phy_device_assign_ids(struct phy_device *dev, u32 phy_id, bool is_c45,
 			  struct phy_c45_device_ids *c45_ids);
+int phy_device_probe_ids(struct phy_device *dev, bool is_c45);
 struct phy_device *phy_device_create(struct mii_bus *bus, int addr, u32 phy_id,
 				     bool is_c45,
 				     struct phy_c45_device_ids *c45_ids);
-- 
2.39.2

