From 7d251954cd0b8f74f7246cc35ac8acffeaa61997 Mon Sep 17 00:00:00 2001
From: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date: Thu, 25 May 2023 17:41:04 +0600
Subject: [PATCH 15/92] gpio: rcar: Do not fail initialization if interrupt is
 not defined

S4 control domain has gpio instances that do not support interrupt
functionality. To support those, this patch allows gpio-rcar driver
to initialize without interrupt defined in the device tree node,
if the node is not declared as interrupt-controller.

To avoid complex changes, the original initialization procedure
is still followed, including bits related to interrupt handling.
Just interrupt handler is not installed.

Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
---
 drivers/gpio/gpio-rcar.c | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/drivers/gpio/gpio-rcar.c b/drivers/gpio/gpio-rcar.c
index 8abddcfce92c..8b5053e6e352 100644
--- a/drivers/gpio/gpio-rcar.c
+++ b/drivers/gpio/gpio-rcar.c
@@ -472,6 +472,7 @@ static int gpio_rcar_parse_dt(struct gpio_rcar_priv *p, unsigned int *npins)
 static int gpio_rcar_probe(struct platform_device *pdev)
 {
 	struct gpio_rcar_priv *p;
+	bool interrupt_controller;
 	struct resource *irq;
 	struct gpio_chip *gpio_chip;
 	struct irq_chip *irq_chip;
@@ -497,11 +498,15 @@ static int gpio_rcar_probe(struct platform_device *pdev)
 
 	pm_runtime_enable(dev);
 
-	irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
-	if (!irq) {
-		dev_err(dev, "missing IRQ\n");
-		ret = -EINVAL;
-		goto err0;
+	interrupt_controller = of_property_read_bool(dev->of_node,
+			"interrupt-controller");
+	if (interrupt_controller) {
+		irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+		if (!irq) {
+			dev_err(dev, "missing IRQ\n");
+			ret = -EINVAL;
+			goto err0;
+		}
 	}
 
 	p->base = devm_platform_ioremap_resource(pdev, 0);
@@ -549,15 +554,20 @@ static int gpio_rcar_probe(struct platform_device *pdev)
 		goto err0;
 	}
 
-	p->irq_parent = irq->start;
-	if (devm_request_irq(dev, irq->start, gpio_rcar_irq_handler,
-			     IRQF_SHARED, name, p)) {
-		dev_err(dev, "failed to request IRQ\n");
-		ret = -ENOENT;
-		goto err1;
+	if (interrupt_controller) {
+		p->irq_parent = irq->start;
+		if (devm_request_irq(dev, irq->start, gpio_rcar_irq_handler,
+				     IRQF_SHARED, name, p)) {
+			dev_err(dev, "failed to request IRQ\n");
+			ret = -ENOENT;
+			goto err1;
+		}
+	} else {
+		p->irq_parent = 0;
 	}
 
-	dev_info(dev, "driving %d GPIOs\n", npins);
+	dev_info(dev, "driving %d GPIOs%s\n", npins,
+			interrupt_controller ? "" : ", no interrupts");
 
 	return 0;
 
-- 
2.30.2

