From fe37b3b372e1194695b3f305bf89efa4b00e4416 Mon Sep 17 00:00:00 2001
From: "dennis.ostermann" <dennis.ostermann@renesas.com>
Date: Wed, 1 Jul 2020 11:04:50 +0200
Subject: [PATCH] H3VC: I2C: Added Cetitec driver

---
 drivers/i2c/rcar_i2c_dm.c | 445 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 445 insertions(+)
 create mode 100644 drivers/i2c/rcar_i2c_dm.c

diff --git a/drivers/i2c/rcar_i2c_dm.c b/drivers/i2c/rcar_i2c_dm.c
new file mode 100644
index 0000000000..892ce1e542
--- /dev/null
+++ b/drivers/i2c/rcar_i2c_dm.c
@@ -0,0 +1,445 @@
+/*
+ * drivers/i2c/rcar_i2c_dm.c
+ *
+ * Copyright (C) 2013 Renesas Electronics Corporation
+ * Copyright (C) 2013 Nobuhiro Iwamatsu <nobuhiro.iwamatsu.yj@renesas.com>
+ * Copyright (C) 2018 CETiTEC GmbH
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Based on rcar_i2c.c
+ *
+ */
+
+#include <common.h>
+#include <clk.h>
+#include <reset.h>
+#include <dm.h>
+#include <i2c.h>
+#include <asm/io.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* register offsets */
+#define ICSCR	0x00	/* slave ctrl */
+#define ICMCR	0x04	/* master ctrl */
+#define ICSSR	0x08	/* slave status */
+#define ICMSR	0x0C	/* master status */
+#define ICSIER	0x10	/* slave irq enable */
+#define ICMIER	0x14	/* master irq enable */
+#define ICCCR	0x18	/* clock dividers */
+#define ICSAR	0x1C	/* slave address */
+#define ICMAR	0x20	/* master address */
+#define ICRXTX	0x24	/* data port */
+#define ICDMAER	0x3c	/* DMA enable */
+#define ICFBSCR	0x38	/* first bit setup cycle */
+
+struct rcar_i2c {
+	void __iomem *base;
+	struct clk clk;
+	int reset;
+	u32 __iomem *srcr, *srstclr;
+	u32 icccr;
+};
+
+#define MCR_MDBS	0x80	/* non-fifo mode switch	*/
+#define MCR_FSCL	0x40	/* override SCL pin	*/
+#define MCR_FSDA	0x20	/* override SDA pin	*/
+#define MCR_OBPC	0x10	/* override pins	*/
+#define MCR_MIE		0x08	/* master if enable	*/
+#define MCR_TSBE	0x04
+#define MCR_FSB		0x02	/* force stop bit	*/
+#define MCR_ESG		0x01	/* en startbit gen.	*/
+
+#define MSR_MASK	0x7f
+#define MSR_MNR		0x40	/* nack received	*/
+#define MSR_MAL		0x20	/* arbitration lost	*/
+#define MSR_MST		0x10	/* sent a stop		*/
+#define MSR_MDE		0x08
+#define MSR_MDT		0x04
+#define MSR_MDR		0x02
+#define MSR_MAT		0x01	/* slave addr xfer done	*/
+
+#define RCAR_BUS_PHASE_START	(MCR_MDBS | MCR_MIE | MCR_ESG)
+#define RCAR_BUS_PHASE_DATA	(MCR_MDBS | MCR_MIE)
+#define RCAR_BUS_MASK_DATA	(~(MCR_ESG | MCR_FSB) & 0xFF)
+#define RCAR_BUS_PHASE_STOP	(MCR_MDBS | MCR_MIE | MCR_FSB)
+
+#define RCAR_IRQ_ACK_SEND	(~(MSR_MAT | MSR_MDE) & 0xFF)
+#define RCAR_IRQ_ACK_RECV	(~(MSR_MAT | MSR_MDR) & 0xFF)
+
+#define LOOP_TIMEOUT	1024
+
+// #define RCAR_I2C_DEBUG
+
+static void rcar_i2c_write(struct rcar_i2c *priv, int reg, u32 val)
+{
+#ifdef RCAR_I2C_DEBUG
+	printf("rcar_i2c_write: %p <- %.8x\n", priv->base + reg, val);
+#endif
+	writel(val, priv->base + reg);
+}
+
+static u32 _rcar_i2c_read(struct rcar_i2c *priv, int reg)
+{
+	return readl(priv->base + reg);
+}
+
+static u32 rcar_i2c_read(struct rcar_i2c *priv, int reg)
+{
+	u32 regval = _rcar_i2c_read(priv, reg);
+#ifdef RCAR_I2C_DEBUG
+	printf("rcar_i2c_read: %p -> %.8x\n", priv->base + reg, regval);
+#endif
+	return regval;
+}
+
+static void rcar_i2c_reset(struct rcar_i2c *priv)
+{
+	*priv->srcr |= (1<<(priv->reset%100));
+	*priv->srstclr = (1<<(priv->reset%100));
+	udelay(1);
+
+	/*
+	 * reset slave mode.
+	 * slave mode is not used on this driver
+	 */
+	rcar_i2c_write(priv, ICSIER, 0);
+	rcar_i2c_write(priv, ICSAR, 0);
+	rcar_i2c_write(priv, ICSCR, 0);
+	rcar_i2c_write(priv, ICSSR, 0);
+
+	/* reset master mode */
+	rcar_i2c_write(priv, ICMIER, 0);
+	rcar_i2c_write(priv, ICMCR, MCR_MDBS);
+	rcar_i2c_write(priv, ICMSR, 0);
+	rcar_i2c_write(priv, ICMAR, 0);
+	rcar_i2c_write(priv, ICDMAER, 0);
+	rcar_i2c_write(priv, ICCCR, priv->icccr);
+}
+
+/*
+ * SCL  = iicck / (20 + SCGD * 8 + F[(ticf + tr + intd) * iicck])
+ * iicck  : I2C internal clock < 20 MHz
+ * ticf : I2C SCL falling time: 35 ns
+ * tr   : I2C SCL rising time:  200 ns
+ * intd : LSI internal delay:
+ * F[n] : n rounded up to an integer
+ */
+static u32 rcar_clock_gen(struct udevice *dev, u32 bus_speed)
+{
+	struct rcar_i2c *priv = dev_get_priv(dev);
+	u32 iicck, f, scl, scgd;
+	u32 intd = 5;
+
+	int bit = 0, cdf_width = 3;
+	int clkfreq = clk_get_rate(&priv->clk);
+
+	for (bit = 0; bit < (1 << cdf_width); bit++) {
+		iicck = clkfreq / (1 + bit);
+		if (iicck < 20000000)
+			break;
+	}
+
+	if (bit > (1 << cdf_width)) {
+		puts("rcar-i2c: Can not get CDF\n");
+		return 0;
+	}
+
+	if (ofnode_read_u32(dev->node, "i2c-scl-internal-delay-ns", &intd) != 0) {
+		puts("rcar-i2c: Could not get internal delay from DT\n");
+	}
+
+	f = (35 + 200 + intd) * (iicck / 1000000000);
+
+	for (scgd = 0; scgd < 0x40; scgd++) {
+		scl = iicck / (20 + (scgd * 8) + f);
+		if (scl <= bus_speed)
+			break;
+	}
+
+	if (scgd > 0x40) {
+		puts("rcar-i2c: Can not get SDGB\n");
+		return 0;
+	}
+
+	debug("%s: scl: %d\n", __func__, scl);
+	debug("%s: bit %x\n", __func__, bit);
+	debug("%s: scgd %x\n", __func__, scgd);
+	debug("%s: iccr %x\n", __func__, (scgd << (cdf_width) | bit));
+
+	return scgd << (cdf_width) | bit;
+}
+static int rcar_i2c_poll(struct rcar_i2c *priv, u32 flags)
+{
+	int i = 0;
+	u32 regval;
+
+	while (((regval = _rcar_i2c_read(priv, ICMSR)) & flags) != flags &&
+		   (i++ < LOOP_TIMEOUT)) {
+		if (regval & MSR_MNR)
+			return -EREMOTEIO;
+		if (regval & MSR_MAL)
+			return -EAGAIN;
+		udelay(1);
+	}
+#ifdef RCAR_I2C_DEBUG
+	printf("rcar_i2c_poll (%.2x): %.8x\n", flags&0xff, regval);
+#endif
+	if (i >= LOOP_TIMEOUT)
+		return -ETIMEDOUT;
+
+	return 0;
+}
+
+static int rcar_i2c_recv(struct rcar_i2c *priv, struct i2c_msg *msg,
+						 bool first, bool last)
+{
+	int ret, j;
+
+	// Stop after address not supported by HW, 10bit not supported by driver
+	if (msg->len == 0 || msg->flags & I2C_M_TEN)
+		return -ENOTSUPP;
+
+	/* Start i2c read transfer */
+	rcar_i2c_write(priv, ICMAR, (msg->addr << 1) | 1);
+	if (first) {
+		rcar_i2c_write(priv, ICMSR, 0);
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_START);
+	} else {
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_START);
+		rcar_i2c_write(priv, ICMSR, 0);
+	}
+
+	/* Wait for outputting address */
+	ret = rcar_i2c_poll(priv, MSR_MAT | MSR_MDR);
+	if (ret)
+		return ret;
+	rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_DATA);
+
+	if (msg->len == 1 && last) {
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_STOP);
+	}
+	rcar_i2c_write(priv, ICMSR, RCAR_IRQ_ACK_RECV);
+
+	/* Receive data */
+	for (j = 0;j < msg->len;++j) {
+		ret = rcar_i2c_poll(priv, MSR_MDR);
+		if (ret)
+			return ret;
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_DATA);
+
+		msg->buf[j] = rcar_i2c_read(priv, ICRXTX);
+
+		if (j+2 >= msg->len && last) {
+			rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_STOP);
+		}
+
+		if (j+1 != msg->len || last) {
+			rcar_i2c_write(priv, ICMSR, RCAR_IRQ_ACK_RECV);
+		}
+	}
+
+	if (last) {
+		ret = rcar_i2c_poll(priv, MSR_MST);
+		if (ret)
+			return ret;
+
+		rcar_i2c_write(priv, ICMSR, 0);
+	}
+
+	return 0;
+}
+
+static int rcar_i2c_send(struct rcar_i2c *priv, struct i2c_msg *msg,
+						  bool first, bool last)
+{
+	int ret, j;
+
+	// Stop after address not supported by HW, 10bit not supported by driver
+	if (msg->len == 0 || msg->flags & I2C_M_TEN)
+		return -ENOTSUPP;
+
+	/* Start i2c write transfer */
+	rcar_i2c_write(priv, ICMAR, msg->addr << 1);
+	if (first) {
+		rcar_i2c_write(priv, ICMSR, 0);
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_START);
+	} else {
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_START);
+		rcar_i2c_write(priv, ICMSR, 0);
+	}
+
+	/* Wait for outputting address */
+	ret = rcar_i2c_poll(priv, MSR_MAT | MSR_MDE);
+	if (ret)
+		return ret;
+	rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_DATA);
+
+	/* Monitor transmission of data */
+	for (j = 0;j < msg->len;++j) {
+		rcar_i2c_write(priv, ICRXTX, msg->buf[j]);
+		rcar_i2c_write(priv, ICMSR, RCAR_IRQ_ACK_SEND);
+
+		ret = rcar_i2c_poll(priv, MSR_MDE);
+		if (ret)
+			return ret;
+
+		if (j < msg->len-1)
+			rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_DATA);
+	}
+
+	if (last) {
+		rcar_i2c_write(priv, ICMCR, RCAR_BUS_PHASE_STOP);
+		rcar_i2c_write(priv, ICMSR, RCAR_IRQ_ACK_SEND);
+
+		/* Wait for end of transmission */
+		ret = rcar_i2c_poll(priv, MSR_MST);
+		if (ret)
+			return ret;
+
+		rcar_i2c_write(priv, ICMSR, 0);
+	}
+
+	return 0;
+}
+
+static int rcar_i2c_bus_barrier(struct rcar_i2c *priv)
+{
+	u32 regval;
+	int i;
+
+	for (i = 0; i < LOOP_TIMEOUT; i++) {
+		/* make sure that bus is not busy */
+		if (!((regval = _rcar_i2c_read(priv, ICMCR)) & MCR_FSDA))
+			return 0;
+		udelay(1);
+	}
+
+	printf("rcar_i2c_bus_barrier: busy: %.8x\n", regval);
+	return -EBUSY;
+}
+
+static int rcar_i2c_xfer(struct udevice *dev, struct i2c_msg *msgs, int nmsgs)
+{
+	int ret = 0, i;
+	struct rcar_i2c *priv;
+
+	if(!dev || !msgs || nmsgs == 0)
+		return -EINVAL;
+
+	priv = dev_get_priv(dev);
+
+	rcar_i2c_reset(priv);
+
+	ret = rcar_i2c_bus_barrier(priv);
+	if (ret != 0)
+		return ret;
+
+	for (i = 0;i < nmsgs;++i) {
+		if (msgs[i].flags & I2C_M_RD) {
+			ret = rcar_i2c_recv(priv, msgs+i, i==0, i==(nmsgs-1));
+		} else {
+			ret = rcar_i2c_send(priv, msgs+i, i==0, i==(nmsgs-1));
+		}
+		if (ret != 0) {
+			rcar_i2c_write(priv, ICMCR, MCR_MDBS);
+			rcar_i2c_write(priv, ICMSR, 0);
+			return ret;
+		}
+	}
+
+	rcar_i2c_write(priv, ICMCR, MCR_MDBS);
+	rcar_i2c_write(priv, ICMSR, 0);
+	return 0;
+}
+
+static int rcar_i2c_probe_chip(struct udevice *dev, uint chip_addr, uint chip_flags)
+{
+	u8 data[] = {0};
+	struct i2c_msg msg = {
+		.addr = chip_addr,
+		.flags = I2C_M_STOP,
+		.len = 1,
+		.buf = data
+	};
+
+	if (chip_flags & DM_I2C_CHIP_10BIT)
+		return -ENOTSUPP;
+
+	return rcar_i2c_xfer(dev, &msg, 1);
+}
+
+static int rcar_i2c_set_bus_speed(struct udevice *dev,
+								  unsigned int speed)
+{
+	struct rcar_i2c *priv = dev_get_priv(dev);
+	int ret = 0;
+
+	priv->icccr = rcar_clock_gen(dev, speed);
+	if (priv->icccr == 0) {
+		puts("I2C: Init failed\n");
+		ret = -1;
+	} else {
+		rcar_i2c_write(priv, ICCCR, priv->icccr);
+	}
+	return ret;
+}
+
+static int rcar_i2c_probe(struct udevice *dev)
+{
+	struct rcar_i2c *priv = dev_get_priv(dev);
+	int ret;
+	struct ofnode_phandle_args args;
+
+	priv->base = dev_read_addr_ptr(dev);
+
+	ret = clk_get_by_index(dev, 0, &priv->clk);
+	if (ret)
+		return ret;
+
+	ret = clk_enable(&priv->clk);
+	if (ret)
+		return ret;
+
+	ret = ofnode_parse_phandle_with_args(dev->node, "resets", NULL, 1, 0, &args);
+	if (ret)
+		return ret;
+
+	priv->reset = args.args[0];
+	/* Reset register should be in SRCR9/SRSTCLR9 */
+	if (priv->reset/100 != 9)
+		return -ENOTSUPP;
+	priv->srcr = (u32 __iomem*)(0xe6150924);
+	priv->srstclr = (u32 __iomem*)(0xe6150964);
+
+	priv->icccr = rcar_clock_gen(dev, 100000);
+	if (priv->icccr == 0) {
+		puts("I2C: Init failed\n");
+		return -EIO;
+	} else {
+		rcar_i2c_reset(priv);
+	}
+
+	return 0;
+}
+
+static const struct dm_i2c_ops rcar_i2c_ops = {
+	.set_bus_speed = rcar_i2c_set_bus_speed,
+	.xfer = rcar_i2c_xfer,
+	.probe_chip = rcar_i2c_probe_chip,
+};
+
+static const struct udevice_id rcar_i2c_ids[] = {
+	{ .compatible = "renesas,rcar-gen3-i2c" },
+	{ }
+};
+
+U_BOOT_DRIVER(i2c_rcar) = {
+	.name		= "rcar_gen3_i2c",
+	.id			= UCLASS_I2C,
+	.of_match	= rcar_i2c_ids,
+	.probe		= rcar_i2c_probe,
+	.priv_auto_alloc_size = sizeof(struct rcar_i2c),
+	.ops		= &rcar_i2c_ops
+};
-- 
2.17.1

