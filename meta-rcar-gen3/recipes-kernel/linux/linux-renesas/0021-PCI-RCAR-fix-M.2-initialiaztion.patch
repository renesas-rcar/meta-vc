From f58db946c7dd81e126dbabe5837c0d4f482f3792 Mon Sep 17 00:00:00 2001
From: "dennis.ostermann" <dennis.ostermann@renesas.com>
Date: Thu, 6 Feb 2020 14:09:00 +0100
Subject: [PATCH 21/21] PCI RCAR fix M.2 initialiaztion

---
 drivers/pci/host/pcie-rcar.c | 82 ++++++++++++++++++++++++------------
 1 file changed, 54 insertions(+), 28 deletions(-)

diff --git a/drivers/pci/host/pcie-rcar.c b/drivers/pci/host/pcie-rcar.c
index 3679e8e0650a..337f7e3ee922 100644
--- a/drivers/pci/host/pcie-rcar.c
+++ b/drivers/pci/host/pcie-rcar.c
@@ -17,6 +17,7 @@
 #include <linux/bitops.h>
 #include <linux/clk.h>
 #include <linux/delay.h>
+#include <linux/regulator/consumer.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/irqdomain.h>
@@ -158,6 +159,8 @@ struct rcar_pcie {
 	struct list_head	resources;
 	int			root_bus_nr;
 	struct clk		*bus_clk;
+	struct regulator	*pcie3v3; /* 3.3V power supply */
+	struct regulator	*pcie1v8; /* 1.8V power supply */
 	struct			rcar_msi msi;
 };
 
@@ -1199,6 +1202,36 @@ static const struct of_device_id rcar_pcie_of_match[] = {
 	{},
 };
 
+static int rcar_pcie_set_vpcie(struct rcar_pcie *pcie)
+{
+	struct device *dev = pcie->dev;
+	int err;
+
+	if (!IS_ERR(pcie->pcie3v3)) {
+		err = regulator_enable(pcie->pcie3v3);
+		if (err) {
+			dev_err(dev, "fail to enable vpcie3v3 regulator\n");
+			goto err_out;
+		}
+	}
+
+	if (!IS_ERR(pcie->pcie1v8)) {
+		err = regulator_enable(pcie->pcie1v8);
+		if (err) {
+			dev_err(dev, "fail to enable vpcie1v8 regulator\n");
+			goto err_disable_3v3;
+		}
+	}
+
+	return 0;
+
+err_disable_3v3:
+	if (!IS_ERR(pcie->pcie3v3))
+		regulator_disable(pcie->pcie3v3);
+err_out:
+	return err;
+}
+
 static int rcar_pcie_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -1217,6 +1250,27 @@ static int rcar_pcie_probe(struct platform_device *pdev)
 	pcie->dev = dev;
 	platform_set_drvdata(pdev, pcie);
 
+ 
+    pcie->pcie3v3 = devm_regulator_get_optional(dev, "pcie3v3");
+    if (IS_ERR(pcie->pcie3v3)) {
+        if (PTR_ERR(pcie->pcie3v3) == -EPROBE_DEFER)
+            return -EPROBE_DEFER;
+        dev_info(dev, "no pcie3v3 regulator found\n");
+    }
+
+    pcie->pcie1v8 = devm_regulator_get_optional(dev, "pcie1v8");
+    if (IS_ERR(pcie->pcie1v8)) {
+        if (PTR_ERR(pcie->pcie1v8) == -EPROBE_DEFER)
+            return -EPROBE_DEFER;
+                dev_info(dev, "no pcie1v8 regulator found\n");
+    }
+
+    err = rcar_pcie_set_vpcie(pcie);
+    if (err) {
+        dev_err(dev, "failed to set pcie regulators\n");
+            return err;
+    }
+
 	err = pci_parse_request_of_pci_ranges(dev, &pcie->resources, NULL);
 	if (err)
 		goto err_free_bridge;
@@ -1377,31 +1431,3 @@ static struct platform_driver rcar_pcie_driver = {
 	.probe = rcar_pcie_probe,
 };
 builtin_platform_driver(rcar_pcie_driver);
-
-static int rcar_pcie_pci_notifier(struct notifier_block *nb,
-				  unsigned long action, void *data)
-{
-	struct device *dev = data;
-
-	switch (action) {
-	case BUS_NOTIFY_BOUND_DRIVER:
-		/* Force the DMA mask to lower 32-bits */
-		dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32));
-		break;
-	default:
-		return NOTIFY_DONE;
-	}
-
-	return NOTIFY_OK;
-}
-
-static struct notifier_block device_nb = {
-	.notifier_call = rcar_pcie_pci_notifier,
-};
-
-static int __init register_rcar_pcie_pci_notifier(void)
-{
-	return bus_register_notifier(&pci_bus_type, &device_nb);
-}
-
-arch_initcall(register_rcar_pcie_pci_notifier);
-- 
2.17.1

